//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestServiceKeeper.ServiceKeeperReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceRegisteRequest", Namespace="http://schemas.datacontract.org/2004/07/Sparticle.ServiceKeeper.Interface")]
    [System.SerializableAttribute()]
    public partial class ServiceRegisteRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestServiceKeeper.ServiceKeeperReference.ServiceAddress AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceIdentityField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestServiceKeeper.ServiceKeeperReference.ServiceAddress Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceIdentity {
            get {
                return this.ServiceIdentityField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceIdentityField, value) != true)) {
                    this.ServiceIdentityField = value;
                    this.RaisePropertyChanged("ServiceIdentity");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceAddress", Namespace="http://schemas.datacontract.org/2004/07/Sparticle.ServiceKeeper.Interface")]
    [System.SerializableAttribute()]
    public partial class ServiceAddress : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string> PropertyListField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> PropertyList {
            get {
                return this.PropertyListField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyListField, value) != true)) {
                    this.PropertyListField = value;
                    this.RaisePropertyChanged("PropertyList");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceUnregisteRequest", Namespace="http://schemas.datacontract.org/2004/07/Sparticle.ServiceKeeper.Interface")]
    [System.SerializableAttribute()]
    public partial class ServiceUnregisteRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceIdentityField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceIdentity {
            get {
                return this.ServiceIdentityField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceIdentityField, value) != true)) {
                    this.ServiceIdentityField = value;
                    this.RaisePropertyChanged("ServiceIdentity");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceKeeperReference.IServiceRegister")]
    public interface IServiceRegister {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRegister/Register", ReplyAction="http://tempuri.org/IServiceRegister/RegisterResponse")]
        bool Register(TestServiceKeeper.ServiceKeeperReference.ServiceRegisteRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRegister/Register", ReplyAction="http://tempuri.org/IServiceRegister/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(TestServiceKeeper.ServiceKeeperReference.ServiceRegisteRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRegister/UnRegister", ReplyAction="http://tempuri.org/IServiceRegister/UnRegisterResponse")]
        bool UnRegister(TestServiceKeeper.ServiceKeeperReference.ServiceUnregisteRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRegister/UnRegister", ReplyAction="http://tempuri.org/IServiceRegister/UnRegisterResponse")]
        System.Threading.Tasks.Task<bool> UnRegisterAsync(TestServiceKeeper.ServiceKeeperReference.ServiceUnregisteRequest request);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceRegisterChannel : TestServiceKeeper.ServiceKeeperReference.IServiceRegister, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceRegisterClient : System.ServiceModel.ClientBase<TestServiceKeeper.ServiceKeeperReference.IServiceRegister>, TestServiceKeeper.ServiceKeeperReference.IServiceRegister {
        
        public ServiceRegisterClient() {
        }
        
        public ServiceRegisterClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceRegisterClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceRegisterClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceRegisterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Register(TestServiceKeeper.ServiceKeeperReference.ServiceRegisteRequest request) {
            return base.Channel.Register(request);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(TestServiceKeeper.ServiceKeeperReference.ServiceRegisteRequest request) {
            return base.Channel.RegisterAsync(request);
        }
        
        public bool UnRegister(TestServiceKeeper.ServiceKeeperReference.ServiceUnregisteRequest request) {
            return base.Channel.UnRegister(request);
        }
        
        public System.Threading.Tasks.Task<bool> UnRegisterAsync(TestServiceKeeper.ServiceKeeperReference.ServiceUnregisteRequest request) {
            return base.Channel.UnRegisterAsync(request);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceKeeperReference.IServiceKeeper")]
    public interface IServiceKeeper {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceKeeper/GetServiceAddress", ReplyAction="http://tempuri.org/IServiceKeeper/GetServiceAddressResponse")]
        TestServiceKeeper.ServiceKeeperReference.ServiceAddress GetServiceAddress(string serviceIdentity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceKeeper/GetServiceAddress", ReplyAction="http://tempuri.org/IServiceKeeper/GetServiceAddressResponse")]
        System.Threading.Tasks.Task<TestServiceKeeper.ServiceKeeperReference.ServiceAddress> GetServiceAddressAsync(string serviceIdentity);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceKeeperChannel : TestServiceKeeper.ServiceKeeperReference.IServiceKeeper, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceKeeperClient : System.ServiceModel.ClientBase<TestServiceKeeper.ServiceKeeperReference.IServiceKeeper>, TestServiceKeeper.ServiceKeeperReference.IServiceKeeper {
        
        public ServiceKeeperClient() {
        }
        
        public ServiceKeeperClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceKeeperClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceKeeperClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceKeeperClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TestServiceKeeper.ServiceKeeperReference.ServiceAddress GetServiceAddress(string serviceIdentity) {
            return base.Channel.GetServiceAddress(serviceIdentity);
        }
        
        public System.Threading.Tasks.Task<TestServiceKeeper.ServiceKeeperReference.ServiceAddress> GetServiceAddressAsync(string serviceIdentity) {
            return base.Channel.GetServiceAddressAsync(serviceIdentity);
        }
    }
}
